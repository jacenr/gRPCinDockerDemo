// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcDemo.proto

package grpcDemo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	M                    int32    `protobuf:"varint,1,opt,name=m" json:"m,omitempty"`
	N                    int32    `protobuf:"varint,2,opt,name=n" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpcDemo_5d4f9098f582c811, []int{0}
}
func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (dst *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(dst, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetM() int32 {
	if m != nil {
		return m.M
	}
	return 0
}

func (m *Req) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type Resp struct {
	S                    int32    `protobuf:"varint,1,opt,name=s" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpcDemo_5d4f9098f582c811, []int{1}
}
func (m *Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resp.Unmarshal(m, b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
}
func (dst *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(dst, src)
}
func (m *Resp) XXX_Size() int {
	return xxx_messageInfo_Resp.Size(m)
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetS() int32 {
	if m != nil {
		return m.S
	}
	return 0
}

func init() {
	proto.RegisterType((*Req)(nil), "grpcDemo.Req")
	proto.RegisterType((*Resp)(nil), "grpcDemo.Resp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SumClient is the client API for Sum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SumClient interface {
	GetSum(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type sumClient struct {
	cc *grpc.ClientConn
}

func NewSumClient(cc *grpc.ClientConn) SumClient {
	return &sumClient{cc}
}

func (c *sumClient) GetSum(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/grpcDemo.Sum/GetSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SumServer is the server API for Sum service.
type SumServer interface {
	GetSum(context.Context, *Req) (*Resp, error)
}

func RegisterSumServer(s *grpc.Server, srv SumServer) {
	s.RegisterService(&_Sum_serviceDesc, srv)
}

func _Sum_GetSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumServer).GetSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcDemo.Sum/GetSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumServer).GetSum(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sum_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcDemo.Sum",
	HandlerType: (*SumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSum",
			Handler:    _Sum_GetSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcDemo.proto",
}

func init() { proto.RegisterFile("grpcDemo.proto", fileDescriptor_grpcDemo_5d4f9098f582c811) }

var fileDescriptor_grpcDemo_5d4f9098f582c811 = []byte{
	// 122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2f, 0x2a, 0x48,
	0x76, 0x49, 0xcd, 0xcd, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x14,
	0xb9, 0x98, 0x83, 0x52, 0x0b, 0x85, 0x78, 0xb8, 0x18, 0x73, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58,
	0x83, 0x18, 0x73, 0x41, 0xbc, 0x3c, 0x09, 0x26, 0x08, 0x2f, 0x4f, 0x49, 0x84, 0x8b, 0x25, 0x28,
	0xb5, 0xb8, 0x00, 0x24, 0x5a, 0x0c, 0x53, 0x53, 0x6c, 0x64, 0xc0, 0xc5, 0x1c, 0x5c, 0x9a, 0x2b,
	0xa4, 0xc9, 0xc5, 0xe6, 0x9e, 0x5a, 0x02, 0x62, 0xf1, 0xea, 0xc1, 0x2d, 0x09, 0x4a, 0x2d, 0x94,
	0xe2, 0x43, 0xe6, 0x16, 0x17, 0x28, 0x31, 0x24, 0xb1, 0x81, 0xed, 0x36, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x89, 0x0b, 0xe3, 0x79, 0x8d, 0x00, 0x00, 0x00,
}
